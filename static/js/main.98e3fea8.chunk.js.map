{"version":3,"sources":["controller.js","board.js","history.js","game.js","index.js"],"names":["Controller","props","change","e","value","target","isNaN","name","className","type","width","onChange","height","count","winPlayer","nextPlayer","Square","x","y","data","coord","square","win","onClick","squareClick","title","warpEles","Component","len","eles","i","push","Squares","key","BoardRows","Board","History","stepIndex","initGame","onMouseLeave","jumpTo","history","map","v","index","isCurrent","onMouseEnter","Game","state","getInitState","boardSizeChange","bind","this","setState","squares","size","calculate","total","getSquare","now","next","length","start","calculateY","calculateX","startY","startX","calculateL","calculateR","isClick","record","Object","assign","winCoords","calculateWinnerByCoord","forEach","newState","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98e3fea8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Controller = props => {\r\n  const change = e => {\r\n    let value = e.target.value;\r\n    if (isNaN(value)) return;\r\n    if (value > 20) value = 20;\r\n\r\n    props.change(e.target.name, value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"controller\">\r\n      <div>\r\n        <span className=\"label\">画板大小：</span>\r\n        <input type=\"text\" name=\"width\" value={props.width} onChange={change} />\r\n        <span>*</span>\r\n        <input\r\n          type=\"text\"\r\n          name=\"height\"\r\n          value={props.height}\r\n          onChange={change}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span className=\"label\">连棋数量：</span>\r\n        <input type=\"text\" name=\"count\" value={props.count} onChange={change} />\r\n      </div>\r\n      <div>\r\n        <span className=\"label\">下一步棋：</span>\r\n        <span>{props.winPlayer ? \"无\" : props.nextPlayer}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"label\">胜利玩家：</span>\r\n        <span>{props.winPlayer || \"无\"}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import React from \"react\";\r\n\r\nconst Square = props => {\r\n  let { x, y, data } = props;\r\n  let coord = `${y}${x}`;\r\n  let square = data[coord] || { x, y };\r\n  let className = \"square\";\r\n  if (props.winPlayer || square.value) className += \" no-drop\";\r\n  if (square.win) className += \" win-square\";\r\n  const click = () => {\r\n    if (!square.value) {\r\n      square.value = props.nextPlayer;\r\n      props.squareClick(coord, square);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={className} onClick={click} title={`${y},${x}`}>\r\n      <span> {square.value}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst warpEles = (Component, len) => {\r\n  let eles = [];\r\n  for (let i = 0; i < len; i++) {\r\n    eles.push(Component(i));\r\n  }\r\n  return eles;\r\n};\r\n\r\nconst Squares = props => {\r\n  return warpEles(i => <Square {...props} key={i} x={i} />, props.width);\r\n};\r\n\r\nconst BoardRows = props => {\r\n  return warpEles(i => {\r\n    return (\r\n      <div className=\"board-row\" key={i}>\r\n        <Squares {...props} y={i} />\r\n      </div>\r\n    );\r\n  }, props.height);\r\n};\r\n\r\nconst Board = props => {\r\n  return (\r\n    <div className=\"board\">\r\n      <BoardRows {...props}></BoardRows>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nconst History = props => {\r\n  let stepIndex = props.stepIndex;\r\n  return (\r\n    <div className=\"history\">\r\n      <button onClick={props.initGame}>重新开始</button>\r\n      <div\r\n        className=\"items\"\r\n        onMouseLeave={() => props.jumpTo(stepIndex, false)}\r\n      >\r\n        {props.history.map((v, index) => {\r\n          let isCurrent = index === stepIndex;\r\n          return (\r\n            <button\r\n              key={index}\r\n              className={isCurrent ? \"current\" : \"\"}\r\n              onClick={() => props.jumpTo(index, true)}\r\n              onMouseEnter={() => props.jumpTo(index, false)}\r\n            >\r\n              {isCurrent ? \"当前\" : \"快照\" + (index + 1)}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from \"react\";\r\nimport Controller from \"./controller\";\r\nimport Board from \"./board\";\r\nimport History from \"./history\";\r\nimport \"./style.scss\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.getInitState();\r\n    this.boardSizeChange = this.boardSizeChange.bind(this);\r\n    this.squareClick = this.squareClick.bind(this);\r\n    this.jumpTo = this.jumpTo.bind(this);\r\n    this.initGame = this.initGame.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div className=\"game\">\r\n        <h1 className=\"game-title\">\r\n          TIC TAC TOE {state.winPlayer ? \"游戏结束\" : \"\"}\r\n        </h1>\r\n        <History\r\n          history={state.history}\r\n          stepIndex={state.stepIndex}\r\n          initGame={this.initGame}\r\n          jumpTo={this.jumpTo}\r\n        ></History>\r\n        <Board {...state} squareClick={this.squareClick}></Board>\r\n        <Controller\r\n          width={state.width}\r\n          height={state.height}\r\n          count={state.count}\r\n          winPlayer={state.winPlayer}\r\n          nextPlayer={state.nextPlayer}\r\n          change={this.boardSizeChange}\r\n        ></Controller>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getInitState() {\r\n    return {\r\n      history: [],\r\n      data: {},\r\n      stepIndex: 0,\r\n      count: 5,\r\n      width: 15,\r\n      height: 15,\r\n      nextPlayer: \"x\",\r\n      winPlayer: \"\"\r\n    };\r\n  }\r\n\r\n  initGame() {\r\n    this.setState(this.getInitState());\r\n  }\r\n\r\n  calculateWinnerByCoord(squares, square) {\r\n    const { x, y } = square;\r\n    const size = this.state.count - 1;\r\n\r\n    const calculate = (total, getSquare) => {\r\n      let count = [];\r\n      for (let index = 0; index < total; index++) {\r\n        let { now, next } = getSquare(index);\r\n        if (now && next && now.value === next.value) {\r\n          count.push(now);\r\n          if (count.length === size) {\r\n            count.push(next);\r\n            return count;\r\n          }\r\n        } else {\r\n          count = [];\r\n        }\r\n      }\r\n      return \"\";\r\n    };\r\n\r\n    const calculateY = () => {\r\n      let start = y - size < 0 ? 0 : y - size;\r\n      return calculate(y + size, index => {\r\n        let now = squares[`${start + index}${x}`];\r\n        let next = squares[`${start + index + 1}${x}`];\r\n        return { now, next };\r\n      });\r\n    };\r\n\r\n    const calculateX = () => {\r\n      let start = x - size < 0 ? 0 : x - size;\r\n      return calculate(x + size, index => {\r\n        let now = squares[`${y}${start + index}`];\r\n        let next = squares[`${y}${start + index + 1}`];\r\n        return { now, next };\r\n      });\r\n    };\r\n\r\n    const calculateL = () => {\r\n      let startY = y - size;\r\n      let startX = x - size;\r\n      return calculate(size * size, index => {\r\n        let now = squares[`${startY + index}${startX + index}`];\r\n        let next = squares[`${startY + index + 1}${startX + index + 1}`];\r\n        return { now, next };\r\n      });\r\n    };\r\n\r\n    const calculateR = () => {\r\n      let startY = y - size;\r\n      let startX = x + size;\r\n      return calculate(size * size, index => {\r\n        let now = squares[`${startY + index}${startX - index}`];\r\n        let next = squares[`${startY + index + 1}${startX - index - 1}`];\r\n        return { now, next };\r\n      });\r\n    };\r\n\r\n    return calculateY() || calculateX() || calculateL() || calculateR();\r\n  }\r\n\r\n  boardSizeChange(name, value) {\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  jumpTo(index, isClick) {\r\n    let record = this.state.history[index];\r\n    if (!record) return;\r\n    if (isClick) {\r\n      this.setState(record);\r\n    } else {\r\n      let { history, stepIndex } = this.state;\r\n      this.setState({ ...record, history, stepIndex });\r\n    }\r\n  }\r\n\r\n  squareClick(coord, square) {\r\n    if (this.state.winPlayer) return;\r\n    let data = Object.assign({}, this.state.data);\r\n    data[coord] = square;\r\n    let winCoords = this.calculateWinnerByCoord(data, square);\r\n    let winPlayer = \"\";\r\n    if (winCoords) {\r\n      winPlayer = winCoords[0].value;\r\n      winCoords.forEach(v => {\r\n        data[`${v.y}${v.x}`].win = true;\r\n      });\r\n    }\r\n    let nextPlayer = square.value === \"o\" ? \"x\" : \"o\";\r\n    let stepIndex = this.state.history.length;\r\n    let newState = { ...this.state, data, nextPlayer, winPlayer, stepIndex };\r\n    newState.history = [...this.state.history, newState];\r\n    this.setState(newState);\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport TicTacToe from \"./game\";\r\n\r\nReactDOM.render(<TicTacToe />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}